%****************************************************************************
%                                                                            
% This file is part of the "Planar Interpolation Library" (PlanInLib)        
% Copyright (C) 2016, Julio Daniel Machado Silva.                            
%                                                                            
% PlanInLib is free software; you can redistribute it and/or                 
% modify it under the terms of the GNU Lesser General Public                 
% License as published by the Free Software Foundation; either               
% version 3 of the License, or (at your option) any later version.           
%                                                                            
% PlanInLib is distributed in the hope that it will be useful,               
% but WITHOUT ANY WARRANTY; without even the implied warranty of             
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          
% Lesser General Public License for more details.                            
%                                                                            
% You should have received a copy of the GNU Lesser General Public           
% License along with PlanInLib.  If not, see <http://www.gnu.org/licenses/>, 
% or write to the Free Software Foundation, Inc., 51 Franklin Street,        
% Fifth Floor, Boston, MA  02110-1301  USA.                                  
%                                                                            
%****************************************************************************


%% Clear workspace and set up enviroment 
init 

%% Active drawing planes

% Specifies the number of drawing planes
number_of_planes = 10;

%selected_planes = [ 1 2 3 4 5 6 7 8 9 10 ]; 
selected_planes = [ 3 8 ]; 

%% Definitions for the bounding box and the discretizations

% Bounding box limits
xmin = 0; 
xmax = 1; 

ymin = 0; 
ymax = 1; 

tmin = 0; 
tmax = 1; 

% Specifies how coarse the curves (i.e. sketchs) will be 
line_discretization = 64; 

% Specifies how coarse the output mesh will be
grid_discretization = 128; 

%% Base data structures

% Sketch planes' indices
p = linspace(1, number_of_planes, number_of_planes);  

% x sampling of the sketchs
x = linspace(xmin, xmax, line_discretization); 

% x, t sampling for building meshes
xg = linspace(xmin, xmax, grid_discretization); 
tg = linspace(tmin, tmax, grid_discretization); 

% domain sampling to build visualization meshes 
[X, T] = meshgrid(xg, tg); 

%% Create the canyon's input data (a)
perturbation = sin( 4*pi*p/number_of_planes);

Coeffs = 0.4 + 0.1*perturbation; 
Positions = linspace( (1/3+1/4)/2, (2/3+3/4)/2, number_of_planes) + 0.1*perturbation; 

%% Create the canyon's input data (b)
Planes = zeros(line_discretization, 3, number_of_planes); 
t0 = zeros(size(x)); 

figure(1)
hold off
for i = 1 : number_of_planes, 
    y = 1 - Coeffs(i) * phi( x - Positions(i), zeros(size(x)), zeros(size(x)), 1/2);
    plane = [ x; t0 + p(i)/number_of_planes; y ]'; 
    plot3(plane(:,1), plane(:,2), plane(:,3), 'xb')
    hold on
    Planes(:,:,i) = plane; 
end

%% Create the canyon's input data (c)
Points = []; 
for i = 1 : numel(selected_planes), 
    index = selected_planes(i); 
    Points = [ Points; Planes(:,:,index) ]; 
end

figure(1)
hold on
plot3(Points(:,1), Points(:,2), Points(:,3),'or')
axis equal
axis off
title('Input curves (selected curves in red)'); 
% legend('Original Points', 'Selected Points');
xlabel('x'); 
ylabel('t'); 
zlabel('y'); 

%% Write data to the c++ program

% pass the base mesh data to the c++ program
write_grid(X, T, zeros(size(X)), strcat(tmp_dir, '/vertices.mat')); 

% pass the lines data to the c++ program
write_vector3(Points, strcat(tmp_dir, '/points.mat')); 

%% Run the c++ program

cd(tmp_dir)
!./update_mesh
cd(cur_dir)

%% Reads the c++ program' output data

% reads the output mesh generated by the c++ program
[OX, OT, OY] = load_grid(strcat(tmp_dir, '/output_vertices.mat')); 

%% Show final mesh 

figure(3)
hold off
surfl(OX, OT, OY)
colormap bone
shading interp
hold on
plot3(Points(:,1), Points(:,2), Points(:,3),'or')
axis equal
axis off
title('Canyon'); 
legend('Interpolated Surface', 'Selected Points'); 
xlabel('x'); 
ylabel('t'); 
zlabel('y'); 
